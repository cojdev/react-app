{"version":3,"sources":["Todo.js","App.js"],"names":[],"mappingshOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["// React Todo Application\r\n\r\nfunction uuid(len) {\r\n  let length = len || 6;\r\n  let charCodes = [];\r\n  let string = '';\r\n\r\n  for (let i = 0; i < 10; i++) {\r\n    charCodes.push(48 + i);\r\n    charCodes.push(97 + i);\r\n  }\r\n  for (let i = 0; i < 16; i++) {\r\n    charCodes.push(107 + i);\r\n  }\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    let charIndex = Math.floor(Math.random() * charCodes.length);\r\n    string = string + String.fromCharCode(charCodes[charIndex]);\r\n  }\r\n\r\n  return string;\r\n}\r\n\r\nfunction colour(bright) {\r\n  let val;\r\n\r\n  if (bright) {\r\n    val = 'hsl(' + Math.floor(Math.random() * 360) + ', 100%, 60%)';\r\n  }\r\n  else {\r\n    val = '#';\r\n    let chars = '1234567890ABCDEF'.split('');\r\n    for (let i = 0; i < 6; i++) {\r\n      val += chars[Math.floor(Math.random() * chars.length)];\r\n    }\r\n  }\r\n\r\n  console.log(val);\r\n  return val;\r\n}\r\n\r\nclass AddTask extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      newTask: {}\r\n    };\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    if (this.refs.taskName.value === '') {\r\n      alert('Please enter a task');\r\n    }\r\n    else {\r\n      this.setState({\r\n        newTask: {\r\n          content: this.refs.taskName.value,\r\n          completed: false,\r\n          id: uuid(),\r\n          tag: 'Home'\r\n        }\r\n      }, function () {\r\n        console.log(this.state);\r\n        this.props.addTask(this.state.newTask);\r\n        this.refs.taskName.value = '';\r\n      });\r\n    }\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit.bind(this)} className=\"task-form\">\r\n        <div className=\"task-input\">\r\n          <input type=\"text\" ref=\"taskName\" placeholder=\"What do you need to do?\" />\r\n        </div>\r\n        <button className=\"task-add-button\" type=\"submit\" value=\"Submit\">\r\n          <svg viewBox=\"0 0 40 40\">\r\n            <path d=\"M10 20 L30 20 M20 10 L20 30\" />\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nclass TaskItem extends React.Component {\r\n  removeTask(id) {\r\n    this.props.onRemove(id);\r\n  }\r\n\r\n  checkTask(id) {\r\n    this.props.onCheck(id);\r\n  }\r\n\r\n  render() {\r\n    let tags = this.props.tags,\r\n      task = this.props.task;\r\n\r\n    //let colour = tags[task.tag] !== undefined ? tags[task.tag].colour : '#ccc';\r\n\r\n    //let tagStyle = {\r\n    //\tborderColor: tags[task.tag].colour\r\n    //}\r\n    return (\r\n      <li>\r\n        <input\r\n          id={this.props.task.id}\r\n          type=\"checkbox\"\r\n          checked={this.props.task.completed}\r\n          onChange={this.checkTask.bind(this, this.props.task.id)} />\r\n        <label\r\n          htmlFor={this.props.task.id}>\r\n          {this.props.task.content}\r\n          <span\r\n            className=\"task-strike\">\r\n          </span>\r\n        </label>\r\n        <button\r\n          className=\"task-item-remove\"\r\n          onClick={this.removeTask.bind(this, this.props.task.id)}>\r\n          <svg viewBox=\"0 0 40 40\">\r\n            <path d=\"M15 15 L25 25 M25 15 L15 25\" />\r\n          </svg>\r\n        </button>\r\n      </li>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nclass TaskList extends React.Component {\r\n\r\n  render() {\r\n    let taskItems = this.props.tasks.map(task => {\r\n      // console.log(task.id);\r\n      return (\r\n        <TaskItem\r\n          task={task}\r\n          key={task.id}\r\n          onRemove={this.props.removeTask.bind(this)}\r\n          onCheck={this.props.checkTask.bind(this)}\r\n          tags={this.props.tags} />\r\n      )\r\n    });\r\n\r\n    return (\r\n      <ul className=\"task-list\">\r\n        {taskItems}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nclass TaskControls extends React.Component {\r\n  render() {\r\n    let filters = this.props.filters;\r\n    filters = filters.map(filter => {\r\n      console.log(filter);\r\n      return (\r\n        <button\r\n          key={filter.id}\r\n          onClick={this.props.setFilter.bind(this, filter)}\r\n          className={this.props.activeFilter === filter.name ? 'btn-active' : ''}>\r\n          {filter.label || filter.name}\r\n        </button>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"task-controls\">\r\n        <span>{this.props.completed()} / {this.props.total()} Completed</span>\r\n        {filters}\r\n        <button\r\n          onClick={this.props.clearCompleted}>\r\n          <i className=\"fa fa-trash-o\" aria-hidden=\"true\"></i> Clear Completed\r\n                  </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Tags extends React.Component {\r\n  render() {\r\n    let tags = this.props.tags;\r\n    tags = tags.map(tag => {\r\n      let dotStyle = {\r\n        background: tag.colour\r\n      };\r\n      let activeStyle = {\r\n        boxShadow: '0 0 0 2px ' + tag.colour\r\n      };\r\n      return (\r\n        <button\r\n          key={tag.id}\r\n          onClick={this.props.setTag.bind(this, tag)}\r\n          style={tag.name === this.props.activeTag ? activeStyle : {}}>\r\n          <span style={dotStyle}></span>\r\n          {tag.name}\r\n        </button>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"task-tags\">\r\n        <span>Tags </span> &nbsp;\r\n                  {tags}\r\n        <button\r\n          onClick={this.props.reset.bind(this)}>Reset</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Modal extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"modal-wrap\">\r\n        <div className=\"modal\">\r\n          <p>{this.props.content}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","class App extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\ttasks: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillMount() {\r\n        let initial = [\r\n            {\r\n                id: uuid(),\r\n                content: \"Learn React\",\r\n                completed: false,\r\n                tag: 'Work'\r\n            },\r\n            {\r\n                id: uuid(),\r\n                content: \"Make another app\",\r\n                completed: false,\r\n                tag: false\r\n            },\r\n            {\r\n                id: uuid(),\r\n                content: \"Make to do list\",\r\n                completed: true,\r\n                tag: false\r\n            }\r\n        ];\r\n\t\tif (localStorage && localStorage.getItem('tasks')) {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttasks: JSON.parse(localStorage.getItem('tasks'))\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setState({tasks: initial})\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tactiveFilter: 'all',\r\n            activeTag: 'all',\r\n            initial: initial,\r\n\t\t\ttags: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\tname: 'all',\r\n\t\t\t\t\tcolour: colour(true)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\tname: 'Home',\r\n\t\t\t\t\tcolour: colour(true)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\tname: 'Work',\r\n\t\t\t\t\tcolour: colour(true)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\tname: 'School',\r\n\t\t\t\t\tcolour: colour(true)\r\n\t\t\t\t}\r\n            ],\r\n            filters: [\r\n                {   \r\n                    id: uuid(),\r\n                    name: 'all',\r\n                    label: 'All Tasks',\r\n                    method: function (item) {\r\n                        return item;\r\n                    }\r\n                },\r\n                {   \r\n                    id: uuid(),\r\n                    name: 'active',\r\n                    label: 'Active',\r\n                    method: function (item) {\r\n                        return item.completed === false;\r\n                    }\r\n                },\r\n                {   \r\n                    id: uuid(),\r\n                    name: 'completed',\r\n                    label: 'Completed',\r\n                    method: function (item) {\r\n                        return item.completed === true;\r\n                    }\r\n                }\r\n            ]\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\t// Handlers\r\n\thandleAddTask(task) {\r\n\t\tconsole.log(task);\r\n\t\tlet tasks = this.state.tasks;\r\n\t\ttasks.unshift(task);\r\n\t\tthis.setState({tasks: tasks});\r\n\t\tlocalStorage.setItem('tasks', JSON.stringify(tasks));\r\n\t}\r\n\r\n\thandleRemoveTask(id) {\r\n\t\tconsole.log('Delete ' + id);\r\n\t\tlet tasks = this.state.tasks;\r\n\t\tlet target = tasks.findIndex(index => index.id === id);\r\n\t\ttasks.splice(target, 1);\r\n\t\tthis.setState({tasks: tasks});\r\n\t\tlocalStorage.setItem('tasks', JSON.stringify(tasks));\r\n\t}\r\n\r\n\thandleCheckTask(id) {\r\n\t\tconsole.log('Check ' + id);\r\n\t\tlet tasks = this.state.tasks;\r\n\t\tlet target = tasks.findIndex(index => index.id === id);\r\n\t\ttasks[target].completed = tasks[target].completed === true ? false : true;\r\n\t\tthis.setState({tasks: tasks});\r\n\t\tlocalStorage.setItem('tasks', JSON.stringify(tasks));\r\n\t}\r\n\r\n\t// Setters\r\n\tsetFilter(filter) {\r\n\t\tlet activeFilter = filter.name;\r\n\t\tthis.setState({activeFilter: activeFilter});\r\n\t}  \r\n\r\n\tsetTag(tag) {\r\n        let activeTag = tag.name;\r\n\t\tthis.setState({activeTag: activeTag});\r\n\t}\r\n\r\n\treset() {\r\n        let tasks =  this.state.initial;\r\n\t\tthis.setState({tasks: tasks});\r\n\t\tlocalStorage.setItem('tasks', JSON.stringify(tasks));\r\n\t}\r\n\r\n\t// Getters\r\n\tgetTotalCompleted() {\r\n\t\tlet tasks = this.state.tasks;\r\n\t\tlet completed = tasks.filter(item => item.completed === true);\r\n\t\treturn completed.length;\r\n\t}\r\n\r\n\tgetTotalTasks() {\r\n\t\treturn this.state.tasks.length;\r\n\t}\r\n\r\n\tgetActiveList() {\r\n        let filter = this.state.activeFilter;\r\n        let tag = this.state.activeTag;\r\n\t\tlet tasks = this.state.tasks;\r\n\r\n        //Filte by Filter\r\n        for (let i = 0, len = this.state.filters.length; i < len; i++) {\r\n            const element = this.state.filters[i];\r\n            if (filter === element.name) {\r\n                tasks = tasks.filter(function (item) {\r\n                    return element.method(item);\r\n                });\r\n            }\r\n        }\r\n\r\n        // Filter by Tag\r\n        if (tag === 'all') {\r\n            return tasks;\r\n        }\r\n        else {\r\n            return tasks.filter(item => item.tag === tag);\r\n        }\r\n\t}\r\n\r\n\tclearCompleted() {\r\n\t\tlet tasks = this.state.tasks;\r\n\t\ttasks = tasks.filter(item => item.completed === false);\r\n\t\tthis.setState({tasks: tasks});\r\n\t\tlocalStorage.setItem('tasks', JSON.stringify(tasks));\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"app\">\r\n        <AddTask addTask={this.handleAddTask.bind(this)} />\r\n\r\n\t\t\t\t<Tags\r\n\t\t\t\t\ttags={this.state.tags}\r\n\t\t\t\t\tsetTag={this.setTag.bind(this)}\r\n\t\t\t\t\tactiveTag={this.state.activeTag}\r\n\t\t\t\t\treset={this.reset.bind(this)}/>\r\n\r\n\t\t\t\t<TaskList \r\n\t\t\t\t\ttasks={this.getActiveList.call(this)}\r\n\t\t\t\t\tremoveTask={this.handleRemoveTask.bind(this)}\r\n\t\t\t\t\tcheckTask={this.handleCheckTask.bind(this)}\r\n\t\t\t\t\ttags={this.state.tags} />\r\n\r\n\t\t\t\t<TaskControls\r\n                    completed={this.getTotalCompleted.bind(this)}\r\n                    filters={this.state.filters}\r\n\t\t\t\t\ttotal={this.getTotalTasks.bind(this)}\r\n\t\t\t\t\tactiveFilter={this.state.activeFilter}\r\n\t\t\t\t\tsetFilter={this.setFilter.bind(this)}\r\n\t\t\t\t\tclearCompleted={this.clearCompleted.bind(this)} />\r\n\r\n\t\t\t\t {/* <Modal content=\"Nothing yet\" /> */}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nReactDOM.render(\r\n\t<App />,\r\n\tdocument.getElementById('root')\r\n);"]}